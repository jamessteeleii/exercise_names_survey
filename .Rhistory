ggplot(aes(x=tf_idf,
y=reorder_within(word, tf_idf, book_exercise_name))) +
geom_col(show.legend = FALSE) +
labs(x = "Term Frequency - Inverse Exercise Frequency (tf-ief)", y = NULL) +
scale_y_reordered() +
facet_wrap(~book_exercise_name, scales = "free") +
theme_bw()
# # combine and compare suggestions (manually checked obvious errors)
#
bad_suggest_words <- bind_cols(bad_words, suggest_words)
count_words <- count(data_tokens, word)
bad_suggest_words <- inner_join(count_words, bad_suggest_words, by = c(word = "...1"))
View(bad_suggest_words)
data_tokens <- data |>
select(ResponseId, book_exercise_name,
body_position, body_part, action, equipment, equipment_position, action_direction, misc,
recognise, response_name) |>
unnest_tokens(word, response_name) |>
anti_join(stop_words) |>
filter(!is.na(word) & !is.na(recognise)) %>%
mutate(recognise = factor(recognise, levels= c("YES", "NO")))
# spelling errors - https://books.psychstat.org/textmining/data.html
library(hunspell)
words <- unique(data_tokens$word)
bad_words <- hunspell(words)
bad_words <- unique(unlist(bad_words))
suggest_words <- hunspell_suggest(bad_words)
suggest_words <- unlist(lapply(suggest_words, function(x) x[1]))
# # combine and compare suggestions (manually checked obvious errors)
#
bad_suggest_words <- bind_cols(bad_words, suggest_words)
count_words <- count(data_tokens, word)
bad_suggest_words <- inner_join(count_words, bad_suggest_words, by = c(word = "...1"))
# Recode the incorrect suggestions manually with more than 2 uses
# (manually editing original if obvious incorrect spelling)
suggest_words <- recode(suggest_words,
"flye" = "fly",
"flue" = "fly",
"flyes" = "fly",
"pend lay" = "pendlay",
"probated" = "pronated",
"DEC" = "deck",
"insulated" = "supinated",
"hop" = "ohp",
"felt" = "delt",
"pull downs" = "pull down",
"antediluvian" = "vitruvian",
"devoid" = "deltoid",
"soles" = "soleus",
"flex or" = "flexor",
"trice" = "tricep",
"pendent" = "pendlay",
"resistivity" - "resistive",
"kinetics" = "isokinetic",
"fliers" = "fly",
"font" = "dont",
"selector" = "selectorized",
"cal" = "calf",
"dumbbells" = "dumbbell",
"flatcar" - "flat bar",
"gastronomic" = "gastrocnemius",
"overboard" = "hoverboard",
"playpen" = "pendlay",
"pen delay" = "pendlay",
"tr" = "trx",
"virtual" = "vitruvian",
"id" = "idk",
"Maxine" = "machine",
"precede" = "pec deck",
"raid" = "raise",
"pinnate" = "supinate",
"trapezes" = "trapezius",
"trapeziums" = "trapezius",
"barb" = "barbell",
"calf raises" = "calf raise",
"chestfuls" = "chest fly",
"extrasensory" = "extensor",
"extensions" = "extension",
"floors" = "flexor",
"gluten" = "gluteal",
"spelldown" = "lat pull down",
"ply" = "Olympic",
"peck" = "pec deck",
"peddle" = "pendlay",
"dependably" = "pendlay",
"pen lay" = "pendlay",
"preach" = "press",
"detonated" = "pronated",
"teases" = "seated",
"selector" = "selectorized",
"serrate" = "serratus",
"ottoman" = "zottman"
)
# Recode the incorrect suggestions manually with more than 2 uses
# (manually editing original if obvious incorrect spelling)
suggest_words <- recode(suggest_words,
"flye" = "fly",
"flue" = "fly",
"flyes" = "fly",
"pend lay" = "pendlay",
"probated" = "pronated",
"DEC" = "deck",
"insulated" = "supinated",
"hop" = "ohp",
"felt" = "delt",
"pull downs" = "pull down",
"antediluvian" = "vitruvian",
"devoid" = "deltoid",
"soles" = "soleus",
"flex or" = "flexor",
"trice" = "tricep",
"pendent" = "pendlay",
"resistivity" = "resistive",
"kinetics" = "isokinetic",
"fliers" = "fly",
"font" = "dont",
"selector" = "selectorized",
"cal" = "calf",
"dumbbells" = "dumbbell",
"flatcar" - "flat bar",
"gastronomic" = "gastrocnemius",
"overboard" = "hoverboard",
"playpen" = "pendlay",
"pen delay" = "pendlay",
"tr" = "trx",
"virtual" = "vitruvian",
"id" = "idk",
"Maxine" = "machine",
"precede" = "pec deck",
"raid" = "raise",
"pinnate" = "supinate",
"trapezes" = "trapezius",
"trapeziums" = "trapezius",
"barb" = "barbell",
"calf raises" = "calf raise",
"chestfuls" = "chest fly",
"extrasensory" = "extensor",
"extensions" = "extension",
"floors" = "flexor",
"gluten" = "gluteal",
"spelldown" = "lat pull down",
"ply" = "Olympic",
"peck" = "pec deck",
"peddle" = "pendlay",
"dependably" = "pendlay",
"pen lay" = "pendlay",
"preach" = "press",
"detonated" = "pronated",
"teases" = "seated",
"selector" = "selectorized",
"serrate" = "serratus",
"ottoman" = "zottman"
)
# Recode the incorrect suggestions manually with more than 2 uses
# (manually editing original if obvious incorrect spelling)
suggest_words <- recode(suggest_words,
"flye" = "fly",
"flue" = "fly",
"flyes" = "fly",
"pend lay" = "pendlay",
"probated" = "pronated",
"DEC" = "deck",
"insulated" = "supinated",
"hop" = "ohp",
"felt" = "delt",
"pull downs" = "pull down",
"antediluvian" = "vitruvian",
"devoid" = "deltoid",
"soles" = "soleus",
"flex or" = "flexor",
"trice" = "tricep",
"pendent" = "pendlay",
"resistivity" = "resistive",
"kinetics" = "isokinetic",
"fliers" = "fly",
"font" = "dont",
"selector" = "selectorized",
"cal" = "calf",
"dumbbells" = "dumbbell",
"flatcar" = "flat bar",
"gastronomic" = "gastrocnemius",
"overboard" = "hoverboard",
"playpen" = "pendlay",
"pen delay" = "pendlay",
"tr" = "trx",
"virtual" = "vitruvian",
"id" = "idk",
"Maxine" = "machine",
"precede" = "pec deck",
"raid" = "raise",
"pinnate" = "supinate",
"trapezes" = "trapezius",
"trapeziums" = "trapezius",
"barb" = "barbell",
"calf raises" = "calf raise",
"chestfuls" = "chest fly",
"extrasensory" = "extensor",
"extensions" = "extension",
"floors" = "flexor",
"gluten" = "gluteal",
"spelldown" = "lat pull down",
"ply" = "Olympic",
"peck" = "pec deck",
"peddle" = "pendlay",
"dependably" = "pendlay",
"pen lay" = "pendlay",
"preach" = "press",
"detonated" = "pronated",
"teases" = "seated",
"selector" = "selectorized",
"serrate" = "serratus",
"ottoman" = "zottman"
)
library(stringi)
bad_whole_words <- paste0("\\b", bad_words, "\\b")
data_tokens$word <- stri_replace_all_regex(data_tokens$word, bad_whole_words, suggest_words,
vectorize_all = FALSE)
exercise_words <- data_tokens |>
filter(recognise == "YES") |>
count(book_exercise_name, word, sort = TRUE)
# inverse exercise (person) frequency
tf_ief <- exercise_words |>
bind_tf_idf(word, book_exercise_name, n)
tf_ief |>
select(-total) |>
arrange(desc(tf_idf))
exercise_words <- data_tokens |>
filter(recognise == "YES") |>
count(book_exercise_name, word, sort = TRUE)
total_words <- exercise_words |>
group_by(book_exercise_name) |>
summarize(total = sum(n))
exercise_words <- left_join(exercise_words, total_words)
# inverse exercise (person) frequency
tf_ief <- exercise_words |>
bind_tf_idf(word, book_exercise_name, n)
tf_ief |>
select(-total) |>
arrange(desc(tf_idf))
tf_ief |>
group_by(book_exercise_name) |>
top_n(10) |>
# ungroup() |>
# mutate(book_exercise_name = as.factor(book_exercise_name),
#        word = reorder_within(word, tf_idf, book_exercise_name)) |>
# separate(word, into = c("word", "lab")) |>
ggplot(aes(x=tf_idf,
y=reorder_within(word, tf_idf, book_exercise_name))) +
geom_col(show.legend = FALSE) +
labs(x = "Term Frequency - Inverse Exercise Frequency (tf-ief)", y = NULL) +
scale_y_reordered() +
facet_wrap(~book_exercise_name, scales = "free") +
theme_bw()
check <- tf_ief |>
group_by(book_exercise_name) |>
top_n(10) |>
# plot relationships between word use across categorical variable
library(scales)
check <- tf_ief |>
group_by(book_exercise_name) |>
top_n(10)
View(check)
tf_ief |>
group_by(book_exercise_name) |>
top_n(5) |>
# ungroup() |>
# mutate(book_exercise_name = as.factor(book_exercise_name),
#        word = reorder_within(word, tf_idf, book_exercise_name)) |>
# separate(word, into = c("word", "lab")) |>
ggplot(aes(x=tf_idf,
y=reorder_within(word, tf_idf, book_exercise_name))) +
geom_col(show.legend = FALSE) +
labs(x = "Term Frequency - Inverse Exercise Frequency (tf-ief)", y = NULL) +
scale_y_reordered() +
facet_wrap(~book_exercise_name, scales = "free") +
theme_bw()
data_tokens <- data |>
select(ResponseId, book_exercise_name,
body_position, body_part, action, equipment, equipment_position, action_direction, misc,
recognise, response_name) |>
unnest_tokens(word, response_name) |>
anti_join(stop_words) |>
filter(!is.na(word) & !is.na(recognise)) %>%
mutate(recognise = factor(recognise, levels= c("YES", "NO")))
# spelling errors - https://books.psychstat.org/textmining/data.html
library(hunspell)
words <- unique(data_tokens$word)
bad_words <- hunspell(words)
bad_words <- unique(unlist(bad_words))
suggest_words <- hunspell_suggest(bad_words)
suggest_words <- unlist(lapply(suggest_words, function(x) x[1]))
# # combine and compare suggestions (manually checked obvious errors)
#
bad_suggest_words <- bind_cols(bad_words, suggest_words)
count_words <- count(data_tokens, word)
bad_suggest_words <- inner_join(count_words, bad_suggest_words, by = c(word = "...1"))
# Recode the incorrect suggestions manually with more than 2 uses
# (manually editing original if obvious incorrect spelling)
suggest_words <- recode(suggest_words,
"flye" = "fly",
"flue" = "fly",
"flues" = "fly",
"flyes" = "fly",
"pend lay" = "pendlay",
"probated" = "pronated",
"DEC" = "deck",
"insulated" = "supinated",
"hop" = "ohp",
"felt" = "delt",
"pull downs" = "pull down",
"antediluvian" = "vitruvian",
"devoid" = "deltoid",
"soles" = "soleus",
"flex or" = "flexor",
"trice" = "tricep",
"pendent" = "pendlay",
"resistivity" = "resistive",
"kinetics" = "isokinetic",
"fliers" = "fly",
"font" = "dont",
"selector" = "selectorized",
"cal" = "calf",
"dumbbells" = "dumbbell",
"flatcar" = "flat bar",
"gastronomic" = "gastrocnemius",
"overboard" = "hoverboard",
"playpen" = "pendlay",
"pen delay" = "pendlay",
"tr" = "trx",
"virtual" = "vitruvian",
"id" = "idk",
"Maxine" = "machine",
"precede" = "pec deck",
"raid" = "raise",
"pinnate" = "supinate",
"trapezes" = "trapezius",
"trapeziums" = "trapezius",
"barb" = "barbell",
"calf raises" = "calf raise",
"chestfuls" = "chest fly",
"extrasensory" = "extensor",
"extensions" = "extension",
"floors" = "flexor",
"gluten" = "gluteal",
"spelldown" = "lat pull down",
"ply" = "Olympic",
"peck" = "pec deck",
"peddle" = "pendlay",
"dependably" = "pendlay",
"pen lay" = "pendlay",
"preach" = "press",
"detonated" = "pronated",
"teases" = "seated",
"selector" = "selectorized",
"serrate" = "serratus",
"ottoman" = "zottman"
)
library(stringi)
bad_whole_words <- paste0("\\b", bad_words, "\\b")
data_tokens$word <- stri_replace_all_regex(data_tokens$word, bad_whole_words, suggest_words,
vectorize_all = FALSE)
exercise_words <- data_tokens |>
filter(recognise == "YES") |>
count(book_exercise_name, word, sort = TRUE)
total_words <- exercise_words |>
group_by(book_exercise_name) |>
summarize(total = sum(n))
exercise_words <- left_join(exercise_words, total_words)
# inverse exercise (person) frequency
tf_ief <- exercise_words |>
bind_tf_idf(word, book_exercise_name, n)
tf_ief |>
select(-total) |>
arrange(desc(tf_idf))
library(forcats)
tf_ief |>
group_by(book_exercise_name) |>
top_n(5) |>
# ungroup() |>
# mutate(book_exercise_name = as.factor(book_exercise_name),
#        word = reorder_within(word, tf_idf, book_exercise_name)) |>
# separate(word, into = c("word", "lab")) |>
ggplot(aes(x=tf_idf,
y=reorder_within(word, tf_idf, book_exercise_name))) +
geom_col(show.legend = FALSE) +
labs(x = "Term Frequency - Inverse Exercise Frequency (tf-ief)", y = NULL) +
scale_y_reordered() +
facet_wrap(~book_exercise_name, scales = "free") +
theme_bw()
# for all double barrel terms split unnest again
data_tokens <-  data_tokens |>
unnest_tokens(word, response_name)
# for all double barrel terms split unnest again
data_tokens <-  data_tokens |>
unnest_tokens(word, word)
data_tokens <- data |>
select(ResponseId, book_exercise_name,
body_position, body_part, action, equipment, equipment_position, action_direction, misc,
recognise, response_name) |>
unnest_tokens(word, response_name) |>
anti_join(stop_words) |>
filter(!is.na(word) & !is.na(recognise)) %>%
mutate(recognise = factor(recognise, levels= c("YES", "NO")))
# spelling errors - https://books.psychstat.org/textmining/data.html
library(hunspell)
words <- unique(data_tokens$word)
bad_words <- hunspell(words)
bad_words <- unique(unlist(bad_words))
suggest_words <- hunspell_suggest(bad_words)
suggest_words <- unlist(lapply(suggest_words, function(x) x[1]))
# # combine and compare suggestions (manually checked obvious errors)
#
bad_suggest_words <- bind_cols(bad_words, suggest_words)
count_words <- count(data_tokens, word)
bad_suggest_words <- inner_join(count_words, bad_suggest_words, by = c(word = "...1"))
# Recode the incorrect suggestions manually with more than 2 uses
# (manually editing original if obvious incorrect spelling)
suggest_words <- recode(suggest_words,
"flye" = "fly",
"flue" = "fly",
"flues" = "fly",
"flyes" = "fly",
"pend lay" = "pendlay",
"probated" = "pronated",
"DEC" = "deck",
"insulated" = "supinated",
"hop" = "ohp",
"felt" = "delt",
"pull downs" = "pull down",
"antediluvian" = "vitruvian",
"devoid" = "deltoid",
"soles" = "soleus",
"flex or" = "flexor",
"trice" = "tricep",
"pendent" = "pendlay",
"resistivity" = "resistive",
"kinetics" = "isokinetic",
"fliers" = "fly",
"font" = "dont",
"selector" = "selectorized",
"cal" = "calf",
"dumbbells" = "dumbbell",
"flatcar" = "flat bar",
"gastronomic" = "gastrocnemius",
"overboard" = "hoverboard",
"playpen" = "pendlay",
"pen delay" = "pendlay",
"tr" = "trx",
"virtual" = "vitruvian",
"id" = "idk",
"Maxine" = "machine",
"precede" = "pec deck",
"raid" = "raise",
"pinnate" = "supinate",
"trapezes" = "trapezius",
"trapeziums" = "trapezius",
"barb" = "barbell",
"calf raises" = "calf raise",
"chestfuls" = "chest fly",
"extrasensory" = "extensor",
"extensions" = "extension",
"floors" = "flexor",
"gluten" = "gluteal",
"spelldown" = "lat pull down",
"ply" = "Olympic",
"peck" = "pec deck",
"peddle" = "pendlay",
"dependably" = "pendlay",
"pen lay" = "pendlay",
"preach" = "press",
"detonated" = "pronated",
"teases" = "seated",
"selector" = "selectorized",
"serrate" = "serratus",
"ottoman" = "zottman"
)
### Add checking the suggestions
library(stringi)
bad_whole_words <- paste0("\\b", bad_words, "\\b")
data_tokens$word <- stri_replace_all_regex(data_tokens$word, bad_whole_words, suggest_words,
vectorize_all = FALSE)
# for all double barrel terms split unnest again
data_tokens <-  data_tokens |>
unnest_tokens(word, word)
exercise_words <- data_tokens |>
filter(recognise == "YES") |>
count(book_exercise_name, word, sort = TRUE)
total_words <- exercise_words |>
group_by(book_exercise_name) |>
summarize(total = sum(n))
exercise_words <- left_join(exercise_words, total_words)
# inverse exercise (person) frequency
tf_ief <- exercise_words |>
bind_tf_idf(word, book_exercise_name, n)
tf_ief |>
select(-total) |>
arrange(desc(tf_idf))
library(forcats)
tf_ief |>
group_by(book_exercise_name) |>
top_n(5) |>
# ungroup() |>
# mutate(book_exercise_name = as.factor(book_exercise_name),
#        word = reorder_within(word, tf_idf, book_exercise_name)) |>
# separate(word, into = c("word", "lab")) |>
ggplot(aes(x=tf_idf,
y=reorder_within(word, tf_idf, book_exercise_name))) +
geom_col(show.legend = FALSE) +
labs(x = "Term Frequency - Inverse Exercise Frequency (tf-ief)", y = NULL) +
scale_y_reordered() +
facet_wrap(~book_exercise_name, scales = "free") +
theme_bw()
